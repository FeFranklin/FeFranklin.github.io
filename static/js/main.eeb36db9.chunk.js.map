{"version":3,"sources":["Snake.js","Food.js","App.js","serviceWorker.js","index.js"],"names":["Snake","props","snakeDots","map","dot","i","style","left","top","className","key","Food","getRandCoordinates","Math","floor","random","App","useState","snake","setSnake","food","setFood","direction","setDirection","speed","setSpeed","gamestate","setGamestate","onKeyDown","e","String","fromCharCode","keyCode","useEffect","window","addEventListener","removeEventListener","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","dots","head","length","push","shift","moveSnake","checkIfOutOfBorders","checkIfCollapse","checkIfEat","onGameOver","alert","body","pop","forEach","newSnake","unshift","enalargeSnake","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eeb36db9.chunk.js","sourcesContent":["import React from 'react';\n\nconst Snake = (props) => {\n    return <div>\n        {props.snakeDots.map((dot, i) => {\n            const style = {\n                left: `${dot[0]}%`,\n                top: `${dot[1]}%`,\n            }\n            return (\n                <div className=\"snake-dot\" key={i} style={style}></div>\n            )\n        })}\n    </div>\n}\n\nexport default Snake;\n","import React from 'react';\n\nconst Food = (props) => {\n    const style = {\n        left: `${props.dot[0]}%`,\n        top: `${props.dot[1]}%`,\n    }\n    return (\n        <div className=\"snake-food\" style={style}></div>\n    )\n};\n\nexport default Food;\n","import React, { useState, useEffect, useRef } from 'react';\nimport Snake from './Snake';\nimport Food from './Food';\n\nconst getRandCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random()*(max - min+1)+min)/2)*2;\n  let y = Math.floor((Math.random()*(max - min+1)+min)/2)*2;\nreturn [x,y];\n}\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nfunction App() {\n  const [snake, setSnake] = useState([[0,0], [2,0]]);\n  const [food, setFood] = useState(getRandCoordinates());\n  const [direction, setDirection] = useState('RIGHT');\n  const [speed, setSpeed] = useState(200);\n  const [gamestate, setGamestate] = useState(true);\n\n  const onKeyDown = (e) => {\n    const keyPressed = String.fromCharCode(e.keyCode);\n    switch (keyPressed) {\n      case 'w': setDirection('UP'); break;\n      case 's': setDirection('DOWN'); break;\n      case 'a': setDirection('LEFT'); break;\n      case 'd': setDirection('RIGHT'); break;\n    }\n  }\n\n  const moveSnake = () => {\n    let dots = [...snake];\n    let head = dots[dots.length - 1];\n\n    switch (direction) {\n      case 'RIGHT': head = [head[0]+2, head[1]]; break;\n      case 'LEFT': head = [head[0]-2, head[1]]; break;\n      case 'UP': head = [head[0], head[1]-2]; break;\n      case 'DOWN': head = [head[0], head[1]+2]; break;\n    }\n\n    dots.push(head);\n    dots.shift();\n    setSnake(dots);\n  }\n\n  useEffect(() => {\n    window.addEventListener('keypress', function (e) {onKeyDown(e)});\n\n    return () => window.removeEventListener('keypress', function (e) {onKeyDown(e)});\n  }, []);\n\n  useInterval(() => {\n    moveSnake();\n    checkIfOutOfBorders();\n    checkIfCollapse();\n    checkIfEat();\n  }, gamestate ? speed : null);\n\n  const onGameOver = () => {\n    setGamestate(false);\n    alert(`Game Over. Sanke length is ${snake.length}`);\n  };\n\n  const checkIfOutOfBorders = () => {\n    const head = snake[snake.length - 1];\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0){\n      onGameOver();\n    };\n  };\n\n  const checkIfCollapse = () => {\n    const body = [...snake];\n    const head = snake[snake.length - 1];\n    body.pop();\n    body.forEach(dot => {\n      if( head[0] === dot[0] && head[1]=== dot[1]){\n        onGameOver();\n      };\n    });\n  };\n\n  const checkIfEat = () => {\n    const head = snake[snake.length - 1];\n    const enalargeSnake = () => {\n      let newSnake = [...snake];\n      newSnake.unshift([]);\n      setSnake(newSnake);\n    };\n    const increaseSpeed = () => {\n      if(speed > 10) {\n        setSpeed(speed - 10);\n      }\n    }\n    if(head[0] === food[0] && head[1] === food[1]){\n      setFood(getRandCoordinates());\n      enalargeSnake();\n      increaseSpeed();\n    }\n  }\n  \n  return (\n    <div className=\"game-area\">\n      <Snake snakeDots={snake} />\n      <Food dot={food} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}